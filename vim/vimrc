" Basics
set nocompatible                             " choose no compatibility with legacy vi
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'Lokaltog/vim-distinguished'
Bundle 'Yggdroot/indentLine'
Bundle 'altercation/vim-colors-solarized'
Bundle 'gmarik/vundle'
Bundle 'jakar/vim-json'
" Bundle 'jgdavey/tslime.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'lukaszb/vim-web-indent'
Bundle 'mileszs/ack.vim'
Bundle 'mineiro/vim-latex'
Bundle 'scrooloose/nerdtree'
Bundle 'slim-template/vim-slim'
" Bundle 'thoughtbot/vim-rspec'
Bundle 'benmills/vimux'
Bundle 'skalnik/vim-vroom'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tsaleh/vim-supertab'
Bundle 'vim-scripts/Align'
Bundle 'vim-scripts/IndexedSearch'
Bundle 'vim-scripts/L9'
Bundle 'vim-scripts/tComment'
Bundle 'vim-scripts/zoom.vim'

filetype plugin indent on                    " Turns on filetype detection, filetype plugins, and filetype indenting
                                             " all of which add nice extra features to whatever language you're using
if has("syntax")
 syntax on
end

set autoindent                               " automatic indentation after newline
set autowriteall                             " http://vim.wikia.com/wiki/Auto_save_files_when_focus_is_lost
set backspace=2
set backupdir=~/.vim/backup
set directory=~/.vim/backup
set encoding=utf-8                           " Set encoding
set expandtab
set foldmethod=manual                        " Folding settings
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set list listchars=tab:\ \ ,trail:Â·
set matchpairs+=<:> " http://vim.1045645.n5.nabble.com/Highlighting-matching-angle-brackets-lt-gt-td1188629.html
set nowrap
set number                                   " show line numbers
set pastetoggle=<F2>
set ruler
set shell=bash                               "set shell=/usr/local/bin/zsh\ --interactive
set shiftwidth=2
set showcmd
set smartcase
set softtabstop=2
set statusline=File:\ %F\ Line:\ %4l/%L/%P\ %3b
set tabstop=2
set tags=tags;/
set textwidth=200
set title
set ttyfast

let mapleader = ","                          " Set mapleader

au FocusLost * :wa

" indentLine
let g:indentLine_color_term = 239

if exists('+colorcolumn')
  set colorcolumn=80
endif

" Ack
nnoremap <leader>f :Ack 


" Replace visually selected word with last deleted/yanked text
" http://vim.wikia.com/wiki/Replace_a_word_with_yanked_text
vnoremap S "_dP


" nowrap toggle
map <F2> :set nowrap!<CR>


" powerline
" https://powerline.readthedocs.org/en/latest/overview.html#installation
set rtp+=/usr/local/lib/python2.7/site-packages/powerline/bindings/vim


" Visual
set guifont=Meslo\ LG\ M\ DZ\ for\ Powerline:h10
if has("gui_running")
  call togglebg#map("<F9>")
  set guioptions=egmrt
  " solarized settings
  colorscheme solarized
  let g:solarized_bold = 0
  let g:solarized_contrast = "high"
  set background=dark
else
  " highlight Pmenu    ctermfg=87  ctermbg=238 guifg=Lightgreen guibg=grey10
  " highlight PmenuSel ctermfg=237 ctermbg=255 guibg=DarkGrey
  colorscheme distinguished
endif


" spell check
map <F3> :setlocal spell spelllang=de_de<CR>
map <F4> :set nospell<CR>


" TComment
map <C-C> :TComment<cr>


" Configure navigation keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>


" split windows
nnoremap <leader>sh :vsplit<CR>
nnoremap <leader>sv :split<CR>


" copy paste
nnoremap <leader>cc "*y
nnoremap <leader>vv "*p


" Stamping
" http://vim.wikia.com/wiki/Replace_a_word_with_yanked_text
nnoremap S diw"0P


" CtrlP
let g:ctrlp_show_hidden = 1
nnoremap <leader>pp :CtrlP<CR>
nnoremap <leader>pb :CtrlPBuffer<CR>
nnoremap <leader>pm :CtrlPBufTag<CR>
let g:ctrlp_custom_ignore = {
      \'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|log\|tmp$',
      \'file': '\.sassc$\|\.exe$\|\.so$\|\.dat$'
      \}

" Completion colors: http://vim.wikia.com/wiki/Omni_completion_popup_menu
highlight Pmenu guibg=grey10 guifg=LightGreen gui=bold
set ofu=syntaxcomplete#Complete


" Align
vnoremap <leader>a :Align =<CR>


" Fugitive
nnoremap <leader>go :Gbrowse<CR>
nnoremap <leader>gb :Gblame<CR>


" vroom / vimux
let g:vroom_use_vimux = 1
let g:vroom_map_keys  = 0
let g:vroom_use_bundle_exec = 0

map <leader>sf :VroomRunTestFile<CR>
map <leader>sc :VroomRunNearestTest<CR>




" vim-rspec
" let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'
" map <leader>sf :call RunCurrentSpecFile()<CR>
" map <leader>sn :call RunNearestSpec()<CR>
" map <leader>ss :call RunLastSpec()<CR>
" map <leader>sa :call RunAllSpecs()<CR>


" NERDTree
let NERDTreeShowHidden = 1
let NERDTreeStatusline = ""
nnoremap <leader>ntt :NERDTreeToggle<CR>
nnoremap <leader>ntr :NERDTreeFind<CR>


" autocmd hooks
if has("autocmd")
  " always showing nerdtree when opening vim
  autocmd VimEnter * NERDTree | wincmd p

  " augroup ruby
  "   autocmd!
  " augroup END

  augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
  augroup END
end



" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby

" Super Tab Completion
function! Smart_TabComplete()
  let line = getline('.')                         " curline
  let substr = strpart(line, -1, col('.')+1)      " from start to cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction


" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Allow saving of files as sudo when I forgot to start vim using sudo.
" http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
cnoremap w!! %!sudo tee > /dev/null %
