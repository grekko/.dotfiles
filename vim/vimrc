" Basics
set nocompatible                             " choose no compatibility with legacy vi
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Bundle 'jgdavey/tslime.vim'
" Bundle 'thoughtbot/vim-rspec'
" Bundle 'tpope/vim-rails'
" Bundle 'ngmy/vim-rubocop'
Bundle 'Keithbsmiley/rspec.vim'
Bundle 'AKurilin/matchit.vim'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'SirVer/ultisnips'
Bundle 'Yggdroot/indentLine'
Bundle 'benmills/vimux'
Bundle 'bkad/CamelCaseMotion'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'vim-ruby/vim-ruby'
Bundle 'ervandew/supertab'
Bundle 'gmarik/vundle'
Bundle 'jakar/vim-json'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'lukaszb/vim-web-indent'
Bundle 'mileszs/ack.vim'
Bundle 'mineiro/vim-latex'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'skalnik/vim-vroom'
Bundle 'slim-template/vim-slim'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tsaleh/vim-supertab'
Bundle 'vim-scripts/Align'
Bundle 'vim-scripts/IndexedSearch'
Bundle 'vim-scripts/L9'
Bundle 'vim-scripts/YankRing.vim'
Bundle 'vim-scripts/tComment'
Bundle 'vim-scripts/zoom.vim'

filetype plugin indent on                    " Turns on filetype detection, filetype plugins, and filetype indenting
                                             " all of which add nice extra features to whatever language you're using
if has("syntax")
  syntax on
end

set nocursorcolumn
set nocursorline
syntax sync minlines=256

set autoindent                               " automatic indentation after newline
set autowriteall                             " http://vim.wikia.com/wiki/Auto_save_files_when_focus_is_lost
set backspace=2
set backupdir=~/.vim/backup
set directory=~/.vim/backup
set encoding=utf-8                           " Set encoding
set expandtab
set foldmethod=manual                        " Folding settings
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set list listchars=tab:\ \ ,trail:·
set matchpairs+=<:> " http://vim.1045645.n5.nabble.com/Highlighting-matching-angle-brackets-lt-gt-td1188629.html
set nowrap
set number                                   " show line numbers
set pastetoggle=<F2>
set ruler
set shell=bash                               "set shell=/usr/local/bin/zsh\ --interactive
set shiftwidth=2
set showcmd
set smartcase
set softtabstop=2
set statusline=File:\ %F\ Line:\ %4l/%L/%P\ %3b
set tabstop=2
set tags=tags;/
set textwidth=200
set title
set ttyfast
set lazyredraw
set synmaxcol=128

let mapleader = ","                          " Set mapleader

au FocusLost * :wa


" Visual
colorscheme distinguished
set guifont=Meslo\ LG\ M\ DZ\ for\ Powerline:h10
highlight Pmenu    ctermfg=87  ctermbg=238 guifg=Lightgreen guibg=grey10
highlight PmenuSel ctermfg=237 ctermbg=255 guibg=DarkGrey


" Syntastic
let g:syntastic_quiet_warning = 0
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_mode_map = { 'mode': 'passive' }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_enable_balloons = 0
let g:syntastic_check_on_open = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

nnoremap <leader>ss :SyntasticCheck<CR>


" Syntastic Colors
highlight SyntasticErrorSign   ctermfg=124 ctermbg=0 guifg=#af0000 guibg=black
highlight SyntasticErrorLine   ctermfg=124 ctermbg=0 guifg=#af0000 guibg=black
highlight SyntasticWarningSign ctermfg=64  ctermbg=0 guifg=#5f5f00 guibg=black


" indentLine
let g:indentLine_color_term = 239

if exists('+colorcolumn')
  set colorcolumn=80
endif


" Yankring
nnoremap <silent> <F11> :YRShow<CR>


" CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e


" Ack
nnoremap <leader>f :Ack 


" Replace visually selected word with last deleted/yanked text
" http://vim.wikia.com/wiki/Replace_a_word_with_yanked_text
vnoremap S "_dP


" nowrap toggle
map <F2> :set nowrap!<CR>


" powerline
" https://powerline.readthedocs.org/en/latest/overview.html#installation
set rtp+=/usr/local/lib/python2.7/site-packages/powerline/bindings/vim


" spell check
map <F3> :setlocal spell spelllang=de_de<CR>
map <F4> :set nospell<CR>


" TComment
map <C-C> :TComment<cr>


" Configure navigation keys
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>
cnoremap <C-h>   <Left>
cnoremap <C-l>   <Right>
cnoremap <C-k>   <Up>
cnoremap <C-j>   <Down>


" Splits
nnoremap <leader>sh :vsplit<CR>
nnoremap <leader>sv :split<CR>
" http://robots.thoughtbot.com/post/48275867281/vim-splits-move-faster-and-more-naturally
set splitbelow
set splitright


" UltiSnips
let g:UltiSnipsExpandTrigger = "<s-tab>"
let g:UltiSnipsSnippetsDirectories = ["ultisnips"]


" copy paste
vnoremap <leader>cop "*y


" save of file
nnoremap SS :w<CR>
nnoremap ZX :w<CR>:SyntasticCheck<CR>


" syntax toggle
function! ToggleSyntax()
  if g:syntaxon == 1
    syntax off
    let g:syntaxon = 0
  else
    syntax on
    let g:syntaxon = 1
  endif
endfunction

let g:syntaxon = 1
nnoremap <F5> :call ToggleSyntax()<CR>


" Stamping
" http://vim.wikia.com/wiki/Replace_a_word_with_yanked_text
" nnoremap S diw"0P


" CtrlP
let g:ctrlp_show_hidden = 1

nnoremap <leader>pp :CtrlP<CR>
nnoremap <leader>pm :CtrlPBufTag<CR>

let g:ctrlp_custom_ignore = {
      \'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|log\|vendor\/bundle\|tmp$',
      \'file': '\.sassc$\|\.exe$\|\.so$\|\.dat$'
      \}


" Completion colors: http://vim.wikia.com/wiki/Omni_completion_popup_menu
" set ofu=syntaxcomplete#Complete


" Align
vnoremap <leader>a :Align =<CR>


" Fugitive
nnoremap <leader>go :Gbrowse<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gc :Gcommit<CR>


" Custom commands
nnoremap <leader>gpp :!git pp<CR>


" vroom / vimux
let g:vroom_use_vimux = 1
let g:vroom_map_keys  = 0
let g:vroom_use_bundle_exec = 0
let g:vroom_spec_command = 'rspec --drb'

let g:VimuxOrientation = "h"
let g:VimuxHeight = "30"

map <leader>sf :VroomRunTestFile<CR>
map <leader>sc :VroomRunNearestTest<CR>


" NERDTree
let NERDTreeShowHidden = 1
" Doesnt work right now
" let NERDTreeStatusline = ""
nnoremap <leader>ntt :NERDTreeToggle<CR>
nnoremap <leader>ntr :NERDTreeFind<CR>

" autocmd hooks
if has("autocmd")
  " au VimEnter * NERDTree | wincmd p

  augroup ruby
    au!
  augroup END

  augroup CursorLine
    "au!
    "au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    "au WinLeave * setlocal nocursorline
  augroup END
end



" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby


" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Allow saving of files as sudo when I forgot to start vim using sudo.
" http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
cnoremap w!! %!sudo tee > /dev/null %
